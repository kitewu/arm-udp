; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\SDRAM\tftpmain.o --asm_dir=.\SDRAM\ --list_dir=.\SDRAM\ --depend=.\SDRAM\tftpmain.d --cpu=ARM920T --apcs=interwork -O0 -I..\Common\Inc -I.\INC -I.\INC\tftp -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Samsung --omf_browse=.\SDRAM\tftpmain.crf Source\tftp\tftpmain.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ntohs PROC
;;;3      
;;;4      unsigned short ntohs(unsigned short s)
000000  e1a01000          MOV      r1,r0
;;;5      {
;;;6      	return (s >> 8) | (s << 8);
000004  e1a00441          ASR      r0,r1,#8
000008  e1800401          ORR      r0,r0,r1,LSL #8
00000c  e3c008ff          BIC      r0,r0,#0xff0000
;;;7      }
000010  e12fff1e          BX       lr
;;;8      
                          ENDP

                  ntohl PROC
;;;9      unsigned long ntohl(unsigned long l)
000014  e1a01000          MOV      r1,r0
;;;10     {
;;;11     	return  ((l >> 24) & 0x000000ff) |
000018  e3a02cff          MOV      r2,#0xff00
00001c  e0022421          AND      r2,r2,r1,LSR #8
000020  e1820c21          ORR      r0,r2,r1,LSR #24
000024  e3a028ff          MOV      r2,#0xff0000
000028  e0022401          AND      r2,r2,r1,LSL #8
00002c  e1800002          ORR      r0,r0,r2
000030  e3a024ff          MOV      r2,#0xff000000
000034  e0022c01          AND      r2,r2,r1,LSL #24
000038  e1800002          ORR      r0,r0,r2
;;;12     		((l >>  8) & 0x0000ff00) |
;;;13     		((l <<  8) & 0x00ff0000) |
;;;14     		((l << 24) & 0xff000000);
;;;15     }
00003c  e12fff1e          BX       lr
;;;16     
                          ENDP

                  htons PROC
;;;17     unsigned short htons(unsigned short s)
000040  e1a01000          MOV      r1,r0
;;;18     {
;;;19     	return (s >> 8) | (s << 8);
000044  e1a00441          ASR      r0,r1,#8
000048  e1800401          ORR      r0,r0,r1,LSL #8
00004c  e3c008ff          BIC      r0,r0,#0xff0000
;;;20     }
000050  e12fff1e          BX       lr
;;;21     
                          ENDP

                  htonl PROC
;;;22     unsigned long htonl(unsigned long l)
000054  e52de004          PUSH     {lr}
;;;23     {
000058  e1a03000          MOV      r3,r0
;;;24     	return ntohl(l);
00005c  e1a00003          MOV      r0,r3
000060  ebfffffe          BL       ntohl
000064  e49de004          POP      {lr}
;;;25     }
000068  e12fff1e          BX       lr
;;;26     
                          ENDP

                  net_handle PROC
;;;16     
;;;17     int net_handle(void)
00006c  e92d4070          PUSH     {r4-r6,lr}
;;;18     {
;;;19     	struct sk_buff *skb;
;;;20     	struct ethhdr *eth_hdr;												
;;;21     	skb = alloc_skb(ETH_FRAME_LEN);
000070  e59f0154          LDR      r0,|L1.460|
000074  ebfffffe          BL       alloc_skb
000078  e1a05000          MOV      r5,r0
;;;22     
;;;23     	if (eth_rcv(skb) != -1) 
00007c  e1a00005          MOV      r0,r5
000080  ebfffffe          BL       eth_rcv
000084  e3700001          CMN      r0,#1
000088  0a000015          BEQ      |L1.228|
;;;24     	{
;;;25     
;;;26     		eth_hdr = (struct ethhdr *)(skb->data);					
00008c  e59545f0          LDR      r4,[r5,#0x5f0]
;;;27     		skb_pull(skb, ETH_HLEN);
000090  e3a0100e          MOV      r1,#0xe
000094  e1a00005          MOV      r0,r5
000098  ebfffffe          BL       skb_pull
;;;28     		if (ntohs(eth_hdr->h_proto) == ETH_P_ARP)
00009c  e5d4100d          LDRB     r1,[r4,#0xd]
0000a0  e5d4200c          LDRB     r2,[r4,#0xc]
0000a4  e1820401          ORR      r0,r2,r1,LSL #8
0000a8  ebfffffe          BL       ntohs
0000ac  e2401b02          SUB      r1,r0,#0x800
0000b0  e2511006          SUBS     r1,r1,#6
0000b4  1a000002          BNE      |L1.196|
;;;29     		{
;;;30     			arp_rcv_packet(skb);
0000b8  e1a00005          MOV      r0,r5
0000bc  ebfffffe          BL       arp_rcv_packet
0000c0  ea000007          B        |L1.228|
                  |L1.196|
;;;31     		}
;;;32     
;;;33     		else if(ntohs(eth_hdr->h_proto) == ETH_P_IP)						
0000c4  e5d4100d          LDRB     r1,[r4,#0xd]
0000c8  e5d4200c          LDRB     r2,[r4,#0xc]
0000cc  e1820401          ORR      r0,r2,r1,LSL #8
0000d0  ebfffffe          BL       ntohs
0000d4  e3500b02          CMP      r0,#0x800
0000d8  1a000001          BNE      |L1.228|
;;;34     		{
;;;35     		 	ip_rcv_packet(skb);
0000dc  e1a00005          MOV      r0,r5
0000e0  ebfffffe          BL       ip_rcv_packet
                  |L1.228|
;;;36     		}
;;;37     	 	
;;;38     	}
;;;39     
;;;40     	free_skb(skb);
0000e4  e1a00005          MOV      r0,r5
0000e8  ebfffffe          BL       free_skb
;;;41     
;;;42     	return 0;
0000ec  e3a00000          MOV      r0,#0
0000f0  e8bd4070          POP      {r4-r6,lr}
;;;43     }
0000f4  e12fff1e          BX       lr
;;;44     
                          ENDP

                  NetLoadFile PROC
;;;51     
;;;52     int NetLoadFile(UINT32T addr, UINT32T give_ip, UINT32T a3, UINT32T a4)
0000f8  e92d403f          PUSH     {r0-r5,lr}
;;;53     {
0000fc  e24dd014          SUB      sp,sp,#0x14
;;;54     	struct sk_buff *skb = alloc_skb(ETH_FRAME_LEN);
000100  e59f00c4          LDR      r0,|L1.460|
000104  ebfffffe          BL       alloc_skb
000108  e1a05000          MOV      r5,r0
;;;55     	unsigned char eth_addr[ETH_ALEN];	
;;;56     	unsigned char *s;
;;;57     	int i;
;;;58     	char *p;
;;;59     	give_ip = LOCAL_IP_ADDR;
00010c  e59f00bc          LDR      r0,|L1.464|
000110  e58d0018          STR      r0,[sp,#0x18]
;;;60     	s = (unsigned char *)&give_ip;
000114  e28d4018          ADD      r4,sp,#0x18
;;;61     	
;;;62     	uart_printf("Mini TFTP Server 1.0 (IP : %d.%d.%d.%d PORT: %d)\n", s[3], s[2], s[1], s[0], TFTP);		
000118  e3a01045          MOV      r1,#0x45
00011c  e5d40000          LDRB     r0,[r4,#0]
000120  e88d0003          STM      sp,{r0,r1}
000124  e5d43001          LDRB     r3,[r4,#1]
000128  e5d42002          LDRB     r2,[r4,#2]
00012c  e5d41003          LDRB     r1,[r4,#3]
000130  e28f009c          ADR      r0,|L1.468|
000134  ebfffffe          BL       uart_printf
;;;63     	uart_printf("Type tftp -i %d.%d.%d.%d put filename at the host PC\n", s[3], s[2], s[1], s[0]);
000138  e5d40000          LDRB     r0,[r4,#0]
00013c  e58d0000          STR      r0,[sp,#0]
000140  e5d43001          LDRB     r3,[r4,#1]
000144  e5d42002          LDRB     r2,[r4,#2]
000148  e5d41003          LDRB     r1,[r4,#3]
00014c  e28f00b4          ADR      r0,|L1.520|
000150  ebfffffe          BL       uart_printf
;;;64     
;;;65     	eth_init();		
000154  ebfffffe          BL       eth_init
;;;66     	eth_get_addr(eth_addr);		
000158  e28d000c          ADD      r0,sp,#0xc
00015c  ebfffffe          BL       eth_get_addr
;;;67     	ip_init(give_ip);
000160  e59d0018          LDR      r0,[sp,#0x18]
000164  ebfffffe          BL       ip_init
;;;68     	udp_init();
000168  ebfffffe          BL       udp_init
;;;69     		
;;;70     	arp_add_entry(eth_addr, give_ip);	
00016c  e59d1018          LDR      r1,[sp,#0x18]
000170  e28d000c          ADD      r0,sp,#0xc
000174  ebfffffe          BL       arp_add_entry
;;;71     	while(1){
000178  ea000012          B        |L1.456|
                  |L1.380|
;;;72     			uart_printf("udp send\n");
00017c  e28f00bc          ADR      r0,|L1.576|
000180  ebfffffe          BL       uart_printf
;;;73     			net_handle();
000184  ebfffffe          BL       net_handle
;;;74     	
;;;75     			udp_skb_reserve(skb);		
000188  e1a00005          MOV      r0,r5
00018c  ebfffffe          BL       udp_skb_reserve
;;;76     			
;;;77     			ptr = rtc_test();
000190  ebfffffe          BL       rtc_test
000194  e59f10b0          LDR      r1,|L1.588|
000198  e5810000          STR      r0,[r1,#0]  ; ptr
;;;78     			memcpy(skb->data, ptr, 7);
00019c  e3a02007          MOV      r2,#7
0001a0  e59505f0          LDR      r0,[r5,#0x5f0]
0001a4  e5911000          LDR      r1,[r1,#0]  ; ptr
0001a8  ebfffffe          BL       memcpy
;;;79     
;;;80     			udp_send(skb, 3232235627, UDP, 5678);
0001ac  e59f309c          LDR      r3,|L1.592|
0001b0  e3a02011          MOV      r2,#0x11
0001b4  e59f1098          LDR      r1,|L1.596|
0001b8  e1a00005          MOV      r0,r5
0001bc  ebfffffe          BL       udp_send
;;;81     
;;;82     			delay(1000);
0001c0  e3a00ffa          MOV      r0,#0x3e8
0001c4  ebfffffe          BL       delay
                  |L1.456|
0001c8  eaffffeb          B        |L1.380|
;;;83     	}
;;;84     	return 0;
;;;85     }
;;;86     
                          ENDP

                  |L1.460|
                          DCD      0x000005ea
                  |L1.464|
                          DCD      0xc0a8026f
                  |L1.468|
0001d4  4d696e69          DCB      "Mini TFTP Server 1.0 (IP : %d.%d.%d.%d PORT: %d)\n",0
0001d8  20544654
0001dc  50205365
0001e0  72766572
0001e4  20312e30
0001e8  20284950
0001ec  203a2025
0001f0  642e2564
0001f4  2e25642e
0001f8  25642050
0001fc  4f52543a
000200  20256429
000204  0a00    
000206  00                DCB      0
000207  00                DCB      0
                  |L1.520|
000208  54797065          DCB      "Type tftp -i %d.%d.%d.%d put filename at the host PC\n",0
00020c  20746674
000210  70202d69
000214  2025642e
000218  25642e25
00021c  642e2564
000220  20707574
000224  2066696c
000228  656e616d
00022c  65206174
000230  20746865
000234  20686f73
000238  74205043
00023c  0a00    
00023e  00                DCB      0
00023f  00                DCB      0
                  |L1.576|
000240  75647020          DCB      "udp send\n",0
000244  73656e64
000248  0a00    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L1.588|
                          DCD      ptr
                  |L1.592|
                          DCD      0x0000162e
                  |L1.596|
                          DCD      0xc0a8006b

                          AREA ||.data||, DATA, ALIGN=2

                  TftpLoadEnd
000000  00                DCB      0x00
                  TftpPutBegin
000001  00                DCB      0x00
                  TftpPutMark
000002  0000              DCB      0x00,0x00
                  ptr
                          DCD      0x00000000
