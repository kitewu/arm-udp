; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\SDRAM\rtc_test.o --asm_dir=.\SDRAM\ --list_dir=.\SDRAM\ --depend=.\SDRAM\rtc_test.d --cpu=ARM920T --apcs=interwork -O0 -I..\Common\Inc -I.\INC -I.\INC\tftp -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Samsung --omf_browse=.\SDRAM\rtc_test.crf Source\rtc_test.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  rtc_init PROC
;;;30     *********************************************************************************************/
;;;31     void rtc_init(void)
000000  e3a00457          MOV      r0,#0x57000000
;;;32     {
;;;33         rRTCCON  = rRTCCON  & ~(0xf)  | 0x1;		// No reset, Merge BCD counters, 1/32768, RTC Control enable
000004  e5d00040          LDRB     r0,[r0,#0x40]
000008  e3c0000f          BIC      r0,r0,#0xf
00000c  e3800001          ORR      r0,r0,#1
000010  e3a01457          MOV      r1,#0x57000000
000014  e5c10040          STRB     r0,[r1,#0x40]
;;;34         
;;;35         rBCDYEAR = rBCDYEAR & ~(0xff) | TESTYEAR;
000018  e3a00457          MOV      r0,#0x57000000
00001c  e5d00088          LDRB     r0,[r0,#0x88]
000020  e3c000ff          BIC      r0,r0,#0xff
000024  e3800001          ORR      r0,r0,#1
000028  e5c10088          STRB     r0,[r1,#0x88]
;;;36         rBCDMON  = rBCDMON  & ~(0x1f) | TESTMONTH;
00002c  e3a00457          MOV      r0,#0x57000000
000030  e5d00084          LDRB     r0,[r0,#0x84]
000034  e3c0001f          BIC      r0,r0,#0x1f
000038  e3800012          ORR      r0,r0,#0x12
00003c  e5c10084          STRB     r0,[r1,#0x84]
;;;37         rBCDDATE = rBCDDATE & ~(0x3f) | TESTDATE;         
000040  e3a00457          MOV      r0,#0x57000000
000044  e5d0007c          LDRB     r0,[r0,#0x7c]
000048  e3c0003f          BIC      r0,r0,#0x3f
00004c  e3800031          ORR      r0,r0,#0x31
000050  e5c1007c          STRB     r0,[r1,#0x7c]
;;;38         rBCDDAY  = rBCDDAY  & ~(0x7)  | TESTDAY;	// SUN:1 MON:2 TUE:3 WED:4 THU:5 FRI:6 SAT:7
000054  e3a00457          MOV      r0,#0x57000000
000058  e5d00080          LDRB     r0,[r0,#0x80]
00005c  e3c00007          BIC      r0,r0,#7
000060  e3800002          ORR      r0,r0,#2
000064  e5c10080          STRB     r0,[r1,#0x80]
;;;39         rBCDHOUR = rBCDHOUR & ~(0x3f) | TESTHOUR;
000068  e3a00457          MOV      r0,#0x57000000
00006c  e5d00078          LDRB     r0,[r0,#0x78]
000070  e3c0003f          BIC      r0,r0,#0x3f
000074  e3800023          ORR      r0,r0,#0x23
000078  e5c10078          STRB     r0,[r1,#0x78]
;;;40         rBCDMIN  = rBCDMIN  & ~(0x7f) | TESTMIN;
00007c  e3a00457          MOV      r0,#0x57000000
000080  e5d00074          LDRB     r0,[r0,#0x74]
000084  e3c0007f          BIC      r0,r0,#0x7f
000088  e3800059          ORR      r0,r0,#0x59
00008c  e5c10074          STRB     r0,[r1,#0x74]
;;;41         rBCDSEC  = rBCDSEC  & ~(0x7f) | TESTSEC;
000090  e3a00457          MOV      r0,#0x57000000
000094  e5d00070          LDRB     r0,[r0,#0x70]
000098  e3c0007f          BIC      r0,r0,#0x7f
00009c  e3800059          ORR      r0,r0,#0x59
0000a0  e5c10070          STRB     r0,[r1,#0x70]
;;;42         
;;;43         rRTCCON  = 0x0;								// No reset, Merge BCD counters, 1/32768, RTC Control disable    
0000a4  e3a00000          MOV      r0,#0
0000a8  e5c10040          STRB     r0,[r1,#0x40]
;;;44     }
0000ac  e12fff1e          BX       lr
;;;45     
                          ENDP

                  rtc_display PROC
;;;46     char* rtc_display(void)
0000b0  e92d401f          PUSH     {r0-r4,lr}
;;;47     {
;;;48         INT32T nTmp; 
;;;49     	  rRTCCON = 0x01;					// No reset, Merge BCD counters, 1/32768, RTC Control enable
0000b4  e3a00001          MOV      r0,#1
0000b8  e3a01457          MOV      r1,#0x57000000
0000bc  e5c10040          STRB     r0,[r1,#0x40]
;;;50         
;;;51     		while(1)
0000c0  ea00002b          B        |L1.372|
                  |L1.196|
;;;52     		{
;;;53     				if(rBCDYEAR == 0x99) 
0000c4  e3a00457          MOV      r0,#0x57000000
0000c8  e5d00088          LDRB     r0,[r0,#0x88]
0000cc  e3500099          CMP      r0,#0x99
0000d0  1a000003          BNE      |L1.228|
;;;54     						g_nYear = 0x1999;
0000d4  e59f04a8          LDR      r0,|L1.1412|
0000d8  e59f14a8          LDR      r1,|L1.1416|
0000dc  e5810000          STR      r0,[r1,#0]  ; g_nYear
0000e0  ea000004          B        |L1.248|
                  |L1.228|
;;;55     				else 
;;;56     						g_nYear = 0x2000 + rBCDYEAR;
0000e4  e3a00457          MOV      r0,#0x57000000
0000e8  e5d00088          LDRB     r0,[r0,#0x88]
0000ec  e2800a02          ADD      r0,r0,#0x2000
0000f0  e59f1490          LDR      r1,|L1.1416|
0000f4  e5810000          STR      r0,[r1,#0]  ; g_nYear
                  |L1.248|
;;;57     
;;;58     				g_nMonth   = rBCDMON;
0000f8  e3a00457          MOV      r0,#0x57000000
0000fc  e5d00084          LDRB     r0,[r0,#0x84]
000100  e59f1484          LDR      r1,|L1.1420|
000104  e5810000          STR      r0,[r1,#0]  ; g_nMonth
;;;59     				g_nWeekday = rBCDDAY;
000108  e3a00457          MOV      r0,#0x57000000
00010c  e5d00080          LDRB     r0,[r0,#0x80]
000110  e59f1478          LDR      r1,|L1.1424|
000114  e5810000          STR      r0,[r1,#0]  ; g_nWeekday
;;;60     				g_nDate    = rBCDDATE;
000118  e3a00457          MOV      r0,#0x57000000
00011c  e5d0007c          LDRB     r0,[r0,#0x7c]
000120  e59f146c          LDR      r1,|L1.1428|
000124  e5810000          STR      r0,[r1,#0]  ; g_nDate
;;;61     				g_nHour    = rBCDHOUR;
000128  e3a00457          MOV      r0,#0x57000000
00012c  e5d00078          LDRB     r0,[r0,#0x78]
000130  e59f1460          LDR      r1,|L1.1432|
000134  e5810000          STR      r0,[r1,#0]  ; g_nHour
;;;62     				g_nMin     = rBCDMIN;
000138  e3a00457          MOV      r0,#0x57000000
00013c  e5d00074          LDRB     r0,[r0,#0x74]
000140  e59f1454          LDR      r1,|L1.1436|
000144  e5810000          STR      r0,[r1,#0]  ; g_nMin
;;;63     				g_nSec     = rBCDSEC;
000148  e3a00457          MOV      r0,#0x57000000
00014c  e5d00070          LDRB     r0,[r0,#0x70]
000150  e59f1448          LDR      r1,|L1.1440|
000154  e5810000          STR      r0,[r1,#0]  ; g_nSec
;;;64     				
;;;65     				if(g_nSec!=nTmp)		// Same time is not display
000158  e2810000          ADD      r0,r1,#0
00015c  e5900000          LDR      r0,[r0,#0]  ; g_nSec
000160  e1500004          CMP      r0,r4
000164  0a000002          BEQ      |L1.372|
;;;66     				{
;;;67     						nTmp = g_nSec;
000168  e2810000          ADD      r0,r1,#0
00016c  e5904000          LDR      r4,[r0,#0]  ; g_nSec
;;;68     						break;
000170  ea000000          B        |L1.376|
                  |L1.372|
000174  eaffffd2          B        |L1.196|
                  |L1.376|
000178  e1a00000          MOV      r0,r0
;;;69     			 }         
;;;70     		}
;;;71     		 local_time[0] = g_nHour;
00017c  e59f0414          LDR      r0,|L1.1432|
000180  e5d00000          LDRB     r0,[r0,#0]  ; g_nHour
000184  e59f1418          LDR      r1,|L1.1444|
000188  e5c10000          STRB     r0,[r1,#0]  ; local_time
;;;72     		 local_time[1] = g_nMin;
00018c  e59f0408          LDR      r0,|L1.1436|
000190  e5d00000          LDRB     r0,[r0,#0]  ; g_nMin
000194  e5c10001          STRB     r0,[r1,#1]  ; local_time
;;;73     		 local_time[2] = g_nSec;
000198  e59f0400          LDR      r0,|L1.1440|
00019c  e5d00000          LDRB     r0,[r0,#0]  ; g_nSec
0001a0  e5c10002          STRB     r0,[r1,#2]  ; local_time
;;;74     		 local_time[3] = g_nWeekday;
0001a4  e59f03e4          LDR      r0,|L1.1424|
0001a8  e5d00000          LDRB     r0,[r0,#0]  ; g_nWeekday
0001ac  e5c10003          STRB     r0,[r1,#3]  ; local_time
;;;75     		 local_time[4] = g_nMonth;
0001b0  e59f03d4          LDR      r0,|L1.1420|
0001b4  e5d00000          LDRB     r0,[r0,#0]  ; g_nMonth
0001b8  e5c10004          STRB     r0,[r1,#4]  ; local_time
;;;76     		 local_time[5] = g_nDate;
0001bc  e59f03d0          LDR      r0,|L1.1428|
0001c0  e5d00000          LDRB     r0,[r0,#0]  ; g_nDate
0001c4  e5c10005          STRB     r0,[r1,#5]  ; local_time
;;;77     		 local_time[6] = g_nYear;
0001c8  e59f03b8          LDR      r0,|L1.1416|
0001cc  e5d00000          LDRB     r0,[r0,#0]  ; g_nYear
0001d0  e5c10006          STRB     r0,[r1,#6]  ; local_time
;;;78     			
;;;79     		uart_printf(" %02x:%02x:%02x  %10s,  %02x/%02x/%04x\r\n",g_nHour,g_nMin,g_nSec,day[g_nWeekday],g_nMonth,g_nDate,g_nYear);
0001d4  e59f03ac          LDR      r0,|L1.1416|
0001d8  e5901000          LDR      r1,[r0,#0]  ; g_nYear
0001dc  e59f03b0          LDR      r0,|L1.1428|
0001e0  e5902000          LDR      r2,[r0,#0]  ; g_nDate
0001e4  e59f03a0          LDR      r0,|L1.1420|
0001e8  e5903000          LDR      r3,[r0,#0]  ; g_nMonth
0001ec  e59f03b4          LDR      r0,|L1.1448|
0001f0  e59fc398          LDR      r12,|L1.1424|
0001f4  e59cc000          LDR      r12,[r12,#0]  ; g_nWeekday
0001f8  e790010c          LDR      r0,[r0,r12,LSL #2]
0001fc  e88d0009          STM      sp,{r0,r3}
000200  e59f0398          LDR      r0,|L1.1440|
000204  e58d100c          STR      r1,[sp,#0xc]
000208  e58d2008          STR      r2,[sp,#8]
00020c  e5903000          LDR      r3,[r0,#0]  ; g_nSec
000210  e59f0384          LDR      r0,|L1.1436|
000214  e5902000          LDR      r2,[r0,#0]  ; g_nMin
000218  e59f0378          LDR      r0,|L1.1432|
00021c  e5901000          LDR      r1,[r0,#0]  ; g_nHour
000220  e28f0fe1          ADR      r0,|L1.1452|
000224  ebfffffe          BL       uart_printf
;;;80     		return local_time;
000228  e59f0374          LDR      r0,|L1.1444|
00022c  e28dd010          ADD      sp,sp,#0x10
000230  e8bd4010          POP      {r4,lr}
;;;81     }
000234  e12fff1e          BX       lr
;;;82     
                          ENDP

                  rtc_set PROC
;;;147    *********************************************************************************************/
;;;148    void rtc_set(void)
000238  e92d4010          PUSH     {r4,lr}
;;;149    {
;;;150        uart_printf("\n Please input 0x and Two digit then press Enter, such as 0x99.\n");
00023c  e59f0394          LDR      r0,|L1.1496|
000240  ebfffffe          BL       uart_printf
;;;151    
;;;152    	while(1)
000244  ea000010          B        |L1.652|
                  |L1.584|
;;;153    	{
;;;154    	    uart_printf(" Year  : ");
000248  e28f0fe3          ADR      r0,|L1.1500|
00024c  ebfffffe          BL       uart_printf
;;;155    	    g_nYear = uart_getintnum();
000250  ebfffffe          BL       uart_getintnum
000254  e59f132c          LDR      r1,|L1.1416|
000258  e5810000          STR      r0,[r1,#0]  ; g_nYear
;;;156    		if(g_nYear > 0x99 || g_nYear < 0x00 )
00025c  e2810000          ADD      r0,r1,#0
000260  e5900000          LDR      r0,[r0,#0]  ; g_nYear
000264  e3500099          CMP      r0,#0x99
000268  ca000003          BGT      |L1.636|
00026c  e2810000          ADD      r0,r1,#0
000270  e5900000          LDR      r0,[r0,#0]  ; g_nYear
000274  e3500000          CMP      r0,#0
000278  aa000002          BGE      |L1.648|
                  |L1.636|
;;;157    			uart_printf(" The number you input are invalid! Please input again!\n");
00027c  e28f0fd9          ADR      r0,|L1.1512|
000280  ebfffffe          BL       uart_printf
000284  ea000000          B        |L1.652|
                  |L1.648|
;;;158    		else break;
000288  ea000000          B        |L1.656|
                  |L1.652|
00028c  eaffffed          B        |L1.584|
                  |L1.656|
000290  e1a00000          MOV      r0,r0
;;;159    	}
;;;160        
;;;161    	while(1)
000294  ea000010          B        |L1.732|
                  |L1.664|
;;;162    	{
;;;163    	    uart_printf(" Month : ");
000298  e28f0d0e          ADR      r0,|L1.1568|
00029c  ebfffffe          BL       uart_printf
;;;164    	    g_nMonth = uart_getintnum();
0002a0  ebfffffe          BL       uart_getintnum
0002a4  e59f12e0          LDR      r1,|L1.1420|
0002a8  e5810000          STR      r0,[r1,#0]  ; g_nMonth
;;;165    		if(g_nMonth > 0x12 || g_nMonth < 0x1 )
0002ac  e2810000          ADD      r0,r1,#0
0002b0  e5900000          LDR      r0,[r0,#0]  ; g_nMonth
0002b4  e3500012          CMP      r0,#0x12
0002b8  ca000003          BGT      |L1.716|
0002bc  e2810000          ADD      r0,r1,#0
0002c0  e5900000          LDR      r0,[r0,#0]  ; g_nMonth
0002c4  e3500001          CMP      r0,#1
0002c8  aa000002          BGE      |L1.728|
                  |L1.716|
;;;166    			uart_printf(" The number you input are invalid! Please input again!\n");
0002cc  e28f0fc5          ADR      r0,|L1.1512|
0002d0  ebfffffe          BL       uart_printf
0002d4  ea000000          B        |L1.732|
                  |L1.728|
;;;167    		else break;
0002d8  ea000000          B        |L1.736|
                  |L1.732|
0002dc  eaffffed          B        |L1.664|
                  |L1.736|
0002e0  e1a00000          MOV      r0,r0
;;;168    	}
;;;169    
;;;170    	while(1)
0002e4  ea000010          B        |L1.812|
                  |L1.744|
;;;171    	{
;;;172    	    uart_printf(" Date  : ");
0002e8  e28f0fcf          ADR      r0,|L1.1580|
0002ec  ebfffffe          BL       uart_printf
;;;173    	    g_nDate = uart_getintnum();
0002f0  ebfffffe          BL       uart_getintnum
0002f4  e59f1298          LDR      r1,|L1.1428|
0002f8  e5810000          STR      r0,[r1,#0]  ; g_nDate
;;;174    		if(g_nDate > 0x31 || g_nDate < 0x1 )
0002fc  e2810000          ADD      r0,r1,#0
000300  e5900000          LDR      r0,[r0,#0]  ; g_nDate
000304  e3500031          CMP      r0,#0x31
000308  ca000003          BGT      |L1.796|
00030c  e2810000          ADD      r0,r1,#0
000310  e5900000          LDR      r0,[r0,#0]  ; g_nDate
000314  e3500001          CMP      r0,#1
000318  aa000002          BGE      |L1.808|
                  |L1.796|
;;;175    			uart_printf(" The number you input are invalid! Please input again!\n");
00031c  e28f0fb1          ADR      r0,|L1.1512|
000320  ebfffffe          BL       uart_printf
000324  ea000000          B        |L1.812|
                  |L1.808|
;;;176    		else break;
000328  ea000000          B        |L1.816|
                  |L1.812|
00032c  eaffffed          B        |L1.744|
                  |L1.816|
000330  e1a00000          MOV      r0,r0
;;;177    
;;;178    	}
;;;179              
;;;180        uart_printf("\n 1:Sunday 2:Monday 3:Tuesday 4:Wednesday 5:Thursday 6:Friday 7:Saturday\n");
000334  e59f02fc          LDR      r0,|L1.1592|
000338  ebfffffe          BL       uart_printf
;;;181    	while(1)
00033c  ea000010          B        |L1.900|
                  |L1.832|
;;;182    	{
;;;183    	    uart_printf(" Day of week : ");
000340  e28f0fbd          ADR      r0,|L1.1596|
000344  ebfffffe          BL       uart_printf
;;;184    	    g_nWeekday = uart_getintnum();
000348  ebfffffe          BL       uart_getintnum
00034c  e59f123c          LDR      r1,|L1.1424|
000350  e5810000          STR      r0,[r1,#0]  ; g_nWeekday
;;;185    		if(g_nWeekday > 0x7 || g_nWeekday < 0x1 )
000354  e2810000          ADD      r0,r1,#0
000358  e5900000          LDR      r0,[r0,#0]  ; g_nWeekday
00035c  e3500007          CMP      r0,#7
000360  ca000003          BGT      |L1.884|
000364  e2810000          ADD      r0,r1,#0
000368  e5900000          LDR      r0,[r0,#0]  ; g_nWeekday
00036c  e3500001          CMP      r0,#1
000370  aa000002          BGE      |L1.896|
                  |L1.884|
;;;186    			uart_printf(" The number you input are invalid! Please input again!\n");
000374  e28f0f9b          ADR      r0,|L1.1512|
000378  ebfffffe          BL       uart_printf
00037c  ea000000          B        |L1.900|
                  |L1.896|
;;;187    		else break;
000380  ea000000          B        |L1.904|
                  |L1.900|
000384  eaffffed          B        |L1.832|
                  |L1.904|
000388  e1a00000          MOV      r0,r0
;;;188    
;;;189    	}
;;;190        
;;;191    	while(1)
00038c  ea000010          B        |L1.980|
                  |L1.912|
;;;192    	{
;;;193    	    uart_printf("\n Hour  : ");
000390  e28f0fad          ADR      r0,|L1.1612|
000394  ebfffffe          BL       uart_printf
;;;194    	    g_nHour = uart_getintnum();
000398  ebfffffe          BL       uart_getintnum
00039c  e59f11f4          LDR      r1,|L1.1432|
0003a0  e5810000          STR      r0,[r1,#0]  ; g_nHour
;;;195    		if(g_nHour > 0x23 || g_nHour < 0x0 )
0003a4  e2810000          ADD      r0,r1,#0
0003a8  e5900000          LDR      r0,[r0,#0]  ; g_nHour
0003ac  e3500023          CMP      r0,#0x23
0003b0  ca000003          BGT      |L1.964|
0003b4  e2810000          ADD      r0,r1,#0
0003b8  e5900000          LDR      r0,[r0,#0]  ; g_nHour
0003bc  e3500000          CMP      r0,#0
0003c0  aa000002          BGE      |L1.976|
                  |L1.964|
;;;196    			uart_printf(" The number you input are invalid! Please input again!\n");
0003c4  e28f0f87          ADR      r0,|L1.1512|
0003c8  ebfffffe          BL       uart_printf
0003cc  ea000000          B        |L1.980|
                  |L1.976|
;;;197    		else break;
0003d0  ea000000          B        |L1.984|
                  |L1.980|
0003d4  eaffffed          B        |L1.912|
                  |L1.984|
0003d8  e1a00000          MOV      r0,r0
;;;198    	}
;;;199        
;;;200    	while(1)
0003dc  ea000010          B        |L1.1060|
                  |L1.992|
;;;201    	{
;;;202    	    uart_printf(" Minute: ");
0003e0  e28f0e27          ADR      r0,|L1.1624|
0003e4  ebfffffe          BL       uart_printf
;;;203    	    g_nMin = uart_getintnum();
0003e8  ebfffffe          BL       uart_getintnum
0003ec  e59f11a8          LDR      r1,|L1.1436|
0003f0  e5810000          STR      r0,[r1,#0]  ; g_nMin
;;;204    		if(g_nMin > 0x59 || g_nMin < 0x0 )
0003f4  e2810000          ADD      r0,r1,#0
0003f8  e5900000          LDR      r0,[r0,#0]  ; g_nMin
0003fc  e3500059          CMP      r0,#0x59
000400  ca000003          BGT      |L1.1044|
000404  e2810000          ADD      r0,r1,#0
000408  e5900000          LDR      r0,[r0,#0]  ; g_nMin
00040c  e3500000          CMP      r0,#0
000410  aa000002          BGE      |L1.1056|
                  |L1.1044|
;;;205    			uart_printf(" The number you input are invalid! Please input again!\n");
000414  e28f0f73          ADR      r0,|L1.1512|
000418  ebfffffe          BL       uart_printf
00041c  ea000000          B        |L1.1060|
                  |L1.1056|
;;;206    		else break;
000420  ea000000          B        |L1.1064|
                  |L1.1060|
000424  eaffffed          B        |L1.992|
                  |L1.1064|
000428  e1a00000          MOV      r0,r0
;;;207    
;;;208    	}
;;;209        
;;;210    	while(1)
00042c  ea000010          B        |L1.1140|
                  |L1.1072|
;;;211    	{
;;;212    	    uart_printf(" Second: ");
000430  e28f0f8b          ADR      r0,|L1.1636|
000434  ebfffffe          BL       uart_printf
;;;213    	    g_nSec = uart_getintnum();
000438  ebfffffe          BL       uart_getintnum
00043c  e59f115c          LDR      r1,|L1.1440|
000440  e5810000          STR      r0,[r1,#0]  ; g_nSec
;;;214    		if(g_nSec > 0x59 || g_nSec < 0x0 )
000444  e2810000          ADD      r0,r1,#0
000448  e5900000          LDR      r0,[r0,#0]  ; g_nSec
00044c  e3500059          CMP      r0,#0x59
000450  ca000003          BGT      |L1.1124|
000454  e2810000          ADD      r0,r1,#0
000458  e5900000          LDR      r0,[r0,#0]  ; g_nSec
00045c  e3500000          CMP      r0,#0
000460  aa000002          BGE      |L1.1136|
                  |L1.1124|
;;;215    			uart_printf(" The number you input are invalid! Please input again!\n");
000464  e28f0f5f          ADR      r0,|L1.1512|
000468  ebfffffe          BL       uart_printf
00046c  ea000000          B        |L1.1140|
                  |L1.1136|
;;;216    		else break;
000470  ea000000          B        |L1.1144|
                  |L1.1140|
000474  eaffffed          B        |L1.1072|
                  |L1.1144|
000478  e1a00000          MOV      r0,r0
;;;217    	}
;;;218    	    
;;;219        rRTCCON  = rRTCCON  & ~(0xf)  | 0x1;		// No reset, Merge BCD counters, 1/32768, RTC Control enable
00047c  e3a00457          MOV      r0,#0x57000000
000480  e5d00040          LDRB     r0,[r0,#0x40]
000484  e3c0000f          BIC      r0,r0,#0xf
000488  e3800001          ORR      r0,r0,#1
00048c  e3a01457          MOV      r1,#0x57000000
000490  e5c10040          STRB     r0,[r1,#0x40]
;;;220        
;;;221        rBCDYEAR = rBCDYEAR & ~(0xff) | g_nYear;
000494  e3a00457          MOV      r0,#0x57000000
000498  e5d00088          LDRB     r0,[r0,#0x88]
00049c  e3c000ff          BIC      r0,r0,#0xff
0004a0  e59f10e0          LDR      r1,|L1.1416|
0004a4  e5d11000          LDRB     r1,[r1,#0]  ; g_nYear
0004a8  e1800001          ORR      r0,r0,r1
0004ac  e3a01457          MOV      r1,#0x57000000
0004b0  e5c10088          STRB     r0,[r1,#0x88]
;;;222        rBCDMON  = rBCDMON  & ~(0x1f) | g_nMonth;
0004b4  e3a00457          MOV      r0,#0x57000000
0004b8  e5d00084          LDRB     r0,[r0,#0x84]
0004bc  e3c0001f          BIC      r0,r0,#0x1f
0004c0  e59f10c4          LDR      r1,|L1.1420|
0004c4  e5d11000          LDRB     r1,[r1,#0]  ; g_nMonth
0004c8  e1800001          ORR      r0,r0,r1
0004cc  e3a01457          MOV      r1,#0x57000000
0004d0  e5c10084          STRB     r0,[r1,#0x84]
;;;223        rBCDDAY  = rBCDDAY  & ~(0x7)  | g_nWeekday;	// SUN:1 MON:2 TUE:3 WED:4 THU:5 FRI:6 SAT:7
0004d4  e3a00457          MOV      r0,#0x57000000
0004d8  e5d00080          LDRB     r0,[r0,#0x80]
0004dc  e3c00007          BIC      r0,r0,#7
0004e0  e59f10a8          LDR      r1,|L1.1424|
0004e4  e5d11000          LDRB     r1,[r1,#0]  ; g_nWeekday
0004e8  e1800001          ORR      r0,r0,r1
0004ec  e3a01457          MOV      r1,#0x57000000
0004f0  e5c10080          STRB     r0,[r1,#0x80]
;;;224        rBCDDATE = rBCDDATE & ~(0x3f) | g_nDate;
0004f4  e3a00457          MOV      r0,#0x57000000
0004f8  e5d0007c          LDRB     r0,[r0,#0x7c]
0004fc  e3c0003f          BIC      r0,r0,#0x3f
000500  e59f108c          LDR      r1,|L1.1428|
000504  e5d11000          LDRB     r1,[r1,#0]  ; g_nDate
000508  e1800001          ORR      r0,r0,r1
00050c  e3a01457          MOV      r1,#0x57000000
000510  e5c1007c          STRB     r0,[r1,#0x7c]
;;;225        rBCDHOUR = rBCDHOUR & ~(0x3f) | g_nHour;
000514  e3a00457          MOV      r0,#0x57000000
000518  e5d00078          LDRB     r0,[r0,#0x78]
00051c  e3c0003f          BIC      r0,r0,#0x3f
000520  e59f1070          LDR      r1,|L1.1432|
000524  e5d11000          LDRB     r1,[r1,#0]  ; g_nHour
000528  e1800001          ORR      r0,r0,r1
00052c  e3a01457          MOV      r1,#0x57000000
000530  e5c10078          STRB     r0,[r1,#0x78]
;;;226        rBCDMIN  = rBCDMIN  & ~(0x7f) | g_nMin;
000534  e3a00457          MOV      r0,#0x57000000
000538  e5d00074          LDRB     r0,[r0,#0x74]
00053c  e3c0007f          BIC      r0,r0,#0x7f
000540  e59f1054          LDR      r1,|L1.1436|
000544  e5d11000          LDRB     r1,[r1,#0]  ; g_nMin
000548  e1800001          ORR      r0,r0,r1
00054c  e3a01457          MOV      r1,#0x57000000
000550  e5c10074          STRB     r0,[r1,#0x74]
;;;227        rBCDSEC  = rBCDSEC  & ~(0x7f) | g_nSec;
000554  e3a00457          MOV      r0,#0x57000000
000558  e5d00070          LDRB     r0,[r0,#0x70]
00055c  e3c0007f          BIC      r0,r0,#0x7f
000560  e59f1038          LDR      r1,|L1.1440|
000564  e5d11000          LDRB     r1,[r1,#0]  ; g_nSec
000568  e1800001          ORR      r0,r0,r1
00056c  e3a01457          MOV      r1,#0x57000000
000570  e5c10070          STRB     r0,[r1,#0x70]
;;;228        
;;;229    	rRTCCON  = 0x0;								//  No reset, Merge BCD counters, 1/32768, RTC Control disable    
000574  e3a00000          MOV      r0,#0
000578  e5c10040          STRB     r0,[r1,#0x40]
;;;230    }
00057c  e8bd4010          POP      {r4,lr}
000580  e12fff1e          BX       lr
                  |L1.1412|
                          DCD      0x00001999
                  |L1.1416|
                          DCD      g_nYear
                  |L1.1420|
                          DCD      g_nMonth
                  |L1.1424|
                          DCD      g_nWeekday
                  |L1.1428|
                          DCD      g_nDate
                  |L1.1432|
                          DCD      g_nHour
                  |L1.1436|
                          DCD      g_nMin
                  |L1.1440|
                          DCD      g_nSec
                  |L1.1444|
                          DCD      local_time
                  |L1.1448|
                          DCD      ||day||
                  |L1.1452|
0005ac  20253032          DCB      " %02x:%02x:%02x  %10s,  %02x/%02x/%04x\r\n",0
0005b0  783a2530
0005b4  32783a25
0005b8  30327820
0005bc  20253130
0005c0  732c2020
0005c4  25303278
0005c8  2f253032
0005cc  782f2530
0005d0  34780d0a
0005d4  00      
0005d5  00                DCB      0
0005d6  00                DCB      0
0005d7  00                DCB      0
                  |L1.1496|
                          DCD      ||.constdata||
                  |L1.1500|
0005dc  20596561          DCB      " Year  : ",0
0005e0  7220203a
0005e4  2000    
0005e6  00                DCB      0
0005e7  00                DCB      0
                  |L1.1512|
0005e8  20546865          DCB      " The number you input are invalid! Please input again!\n"
0005ec  206e756d
0005f0  62657220
0005f4  796f7520
0005f8  696e7075
0005fc  74206172
000600  6520696e
000604  76616c69
000608  64212050
00060c  6c656173
000610  6520696e
000614  70757420
000618  61676169
00061c  6e210a  
00061f  00                DCB      0
                  |L1.1568|
000620  204d6f6e          DCB      " Month : ",0
000624  7468203a
000628  2000    
00062a  00                DCB      0
00062b  00                DCB      0
                  |L1.1580|
00062c  20446174          DCB      " Date  : ",0
000630  6520203a
000634  2000    
000636  00                DCB      0
000637  00                DCB      0
                  |L1.1592|
                          DCD      ||.constdata||+0x44
                  |L1.1596|
00063c  20446179          DCB      " Day of week : ",0
000640  206f6620
000644  7765656b
000648  203a2000
                  |L1.1612|
00064c  0a20486f          DCB      "\n Hour  : ",0
000650  75722020
000654  3a2000  
000657  00                DCB      0
                  |L1.1624|
000658  204d696e          DCB      " Minute: ",0
00065c  7574653a
000660  2000    
000662  00                DCB      0
000663  00                DCB      0
                  |L1.1636|
000664  20536563          DCB      " Second: ",0
000668  6f6e643a
00066c  2000    
00066e  00                DCB      0
00066f  00                DCB      0
                          ENDP

                  rtc_read PROC
;;;239    *********************************************************************************************/
;;;240    void rtc_read(void)
000670  ea000029          B        |L1.1820|
                  |L1.1652|
;;;241    {
;;;242    	while(1)
;;;243    	{
;;;244    		// Read the data from RTC registers
;;;245    		if(rBCDYEAR == 0x99) 
000674  e3a00457          MOV      r0,#0x57000000
000678  e5d00088          LDRB     r0,[r0,#0x88]
00067c  e3500099          CMP      r0,#0x99
000680  1a000003          BNE      |L1.1684|
;;;246    			g_nYear = 0x1999;
000684  e51f0108          LDR      r0,|L1.1412|
000688  e51f1108          LDR      r1,|L1.1416|
00068c  e5810000          STR      r0,[r1,#0]  ; g_nYear
000690  ea000004          B        |L1.1704|
                  |L1.1684|
;;;247    		else 
;;;248    	    	g_nYear = 0x2000 + rBCDYEAR;
000694  e3a00457          MOV      r0,#0x57000000
000698  e5d00088          LDRB     r0,[r0,#0x88]
00069c  e2800a02          ADD      r0,r0,#0x2000
0006a0  e51f1120          LDR      r1,|L1.1416|
0006a4  e5810000          STR      r0,[r1,#0]  ; g_nYear
                  |L1.1704|
;;;249    	    	
;;;250    		g_nMonth   = rBCDMON;
0006a8  e3a00457          MOV      r0,#0x57000000
0006ac  e5d00084          LDRB     r0,[r0,#0x84]
0006b0  e51f112c          LDR      r1,|L1.1420|
0006b4  e5810000          STR      r0,[r1,#0]  ; g_nMonth
;;;251    		g_nWeekday = rBCDDAY;
0006b8  e3a00457          MOV      r0,#0x57000000
0006bc  e5d00080          LDRB     r0,[r0,#0x80]
0006c0  e51f1138          LDR      r1,|L1.1424|
0006c4  e5810000          STR      r0,[r1,#0]  ; g_nWeekday
;;;252    		g_nDate    = rBCDDATE;
0006c8  e3a00457          MOV      r0,#0x57000000
0006cc  e5d0007c          LDRB     r0,[r0,#0x7c]
0006d0  e51f1144          LDR      r1,|L1.1428|
0006d4  e5810000          STR      r0,[r1,#0]  ; g_nDate
;;;253    		g_nHour    = rBCDHOUR;
0006d8  e3a00457          MOV      r0,#0x57000000
0006dc  e5d00078          LDRB     r0,[r0,#0x78]
0006e0  e51f1150          LDR      r1,|L1.1432|
0006e4  e5810000          STR      r0,[r1,#0]  ; g_nHour
;;;254    		g_nMin     = rBCDMIN;
0006e8  e3a00457          MOV      r0,#0x57000000
0006ec  e5d00074          LDRB     r0,[r0,#0x74]
0006f0  e51f115c          LDR      r1,|L1.1436|
0006f4  e5810000          STR      r0,[r1,#0]  ; g_nMin
;;;255    		g_nSec     = rBCDSEC;
0006f8  e3a00457          MOV      r0,#0x57000000
0006fc  e5d00070          LDRB     r0,[r0,#0x70]
000700  e51f1168          LDR      r1,|L1.1440|
000704  e5810000          STR      r0,[r1,#0]  ; g_nSec
;;;256    		
;;;257    		if(g_nSec != 0)
000708  e2810000          ADD      r0,r1,#0
00070c  e5900000          LDR      r0,[r0,#0]  ; g_nSec
000710  e3500000          CMP      r0,#0
000714  0a000000          BEQ      |L1.1820|
;;;258    	    	break;
000718  ea000000          B        |L1.1824|
                  |L1.1820|
00071c  eaffffd4          B        |L1.1652|
                  |L1.1824|
000720  e1a00000          MOV      r0,r0
;;;259    	}	 
;;;260    }
000724  e12fff1e          BX       lr
;;;261    
                          ENDP

                  rtc_int PROC
                  |L1.1832|
;;;420    *********************************************************************************************/
;;;421    void  __irq  rtc_int(void)
000728  e92d500f          PUSH     {r0-r3,r12,lr}
;;;422    {
;;;423    	ClearPending(BIT_RTC);   
00072c  e3a00101          MOV      r0,#0x40000000
000730  e3a0144a          MOV      r1,#0x4a000000
000734  e5810000          STR      r0,[r1,#0]
000738  e3a0044a          MOV      r0,#0x4a000000
00073c  e5900010          LDR      r0,[r0,#0x10]
000740  e5810010          STR      r0,[r1,#0x10]
;;;424    
;;;425        uart_printf(" RTC Alarm Interrupt O.K.\n");
000744  e28f0f7b          ADR      r0,|L1.2360|
000748  ebfffffe          BL       uart_printf
;;;426        f_nIsRtcInt = 1;  
00074c  e3a00001          MOV      r0,#1
000750  e59f11fc          LDR      r1,|L1.2388|
000754  e5810000          STR      r0,[r1,#0]  ; f_nIsRtcInt
;;;427    }
000758  e8bd500f          POP      {r0-r3,r12,lr}
00075c  e25ef004          SUBS     pc,lr,#4
;;;428    
                          ENDP

                  rtc_alarm_test PROC
;;;270    *********************************************************************************************/  
;;;271    int rtc_alarm_test(void)  
000760  e92d4010          PUSH     {r4,lr}
;;;272    {
;;;273        uart_printf(" RTC Alarm Test for S3C2410 \n");
000764  e28f0f7b          ADR      r0,|L1.2392|
000768  ebfffffe          BL       uart_printf
;;;274    
;;;275        rRTCCON  = 0x01;				// No reset, Merge BCD counters, 1/32768, RTC Control enable
00076c  e3a00001          MOV      r0,#1
000770  e3a01457          MOV      r1,#0x57000000
000774  e5c10040          STRB     r0,[r1,#0x40]
;;;276        rALMYEAR = rBCDYEAR ;
000778  e3a00457          MOV      r0,#0x57000000
00077c  e5d00088          LDRB     r0,[r0,#0x88]
000780  e5c10068          STRB     r0,[r1,#0x68]
;;;277        rALMMON  = rBCDMON;
000784  e3a00457          MOV      r0,#0x57000000
000788  e5d00084          LDRB     r0,[r0,#0x84]
00078c  e5c10064          STRB     r0,[r1,#0x64]
;;;278        rALMDATE = rBCDDATE  ;
000790  e3a00457          MOV      r0,#0x57000000
000794  e5d0007c          LDRB     r0,[r0,#0x7c]
000798  e5c10060          STRB     r0,[r1,#0x60]
;;;279        rALMHOUR = rBCDHOUR ;
00079c  e3a00457          MOV      r0,#0x57000000
0007a0  e5d00078          LDRB     r0,[r0,#0x78]
0007a4  e5c1005c          STRB     r0,[r1,#0x5c]
;;;280        rALMMIN  = rBCDMIN  ;
0007a8  e3a00457          MOV      r0,#0x57000000
0007ac  e5d00074          LDRB     r0,[r0,#0x74]
0007b0  e5c10058          STRB     r0,[r1,#0x58]
;;;281        rALMSEC  = rBCDSEC + 2; 
0007b4  e3a00457          MOV      r0,#0x57000000
0007b8  e5d00070          LDRB     r0,[r0,#0x70]
0007bc  e2800002          ADD      r0,r0,#2
0007c0  e5c10054          STRB     r0,[r1,#0x54]
;;;282        f_nIsRtcInt = 0;
0007c4  e3a00000          MOV      r0,#0
0007c8  e59f1184          LDR      r1,|L1.2388|
0007cc  e5810000          STR      r0,[r1,#0]  ; f_nIsRtcInt
;;;283        pISR_RTC = (unsigned int)rtc_int;
0007d0  e24f00b0          ADR      r0,|L1.1832|
0007d4  e59f119c          LDR      r1,|L1.2424|
0007d8  e5810000          STR      r0,[r1,#0]
;;;284        rRTCALM  = 0x7f;				// Global,g_nYear,g_nMonth,Day,g_nHour,Minute,Second alarm enable
0007dc  e3a0007f          MOV      r0,#0x7f
0007e0  e3a01457          MOV      r1,#0x57000000
0007e4  e5c10050          STRB     r0,[r1,#0x50]
;;;285        rRTCCON  = 0x0;					// No reset, Merge BCD counters, 1/32768, RTC Control disable
0007e8  e3a00000          MOV      r0,#0
0007ec  e5c10040          STRB     r0,[r1,#0x40]
;;;286        rINTMSK &= ~(BIT_RTC);
0007f0  e3a0044a          MOV      r0,#0x4a000000
0007f4  e5900008          LDR      r0,[r0,#8]
0007f8  e3c00101          BIC      r0,r0,#0x40000000
0007fc  e3a0144a          MOV      r1,#0x4a000000
000800  e5810008          STR      r0,[r1,#8]
;;;287    
;;;288    	uart_printf(" %02x:%02x:%02x\n",rBCDHOUR,rBCDMIN,rBCDSEC);        
000804  e3a00457          MOV      r0,#0x57000000
000808  e5d03070          LDRB     r3,[r0,#0x70]
00080c  e5d02074          LDRB     r2,[r0,#0x74]
000810  e5d01078          LDRB     r1,[r0,#0x78]
000814  e28f0e16          ADR      r0,|L1.2428|
000818  ebfffffe          BL       uart_printf
;;;289        delay(21000);					// Delay 2.1s
00081c  e59f016c          LDR      r0,|L1.2448|
000820  ebfffffe          BL       delay
;;;290    	uart_printf(" %02x:%02x:%02x\n",rBCDHOUR,rBCDMIN,rBCDSEC);        
000824  e3a00457          MOV      r0,#0x57000000
000828  e5d03070          LDRB     r3,[r0,#0x70]
00082c  e5d02074          LDRB     r2,[r0,#0x74]
000830  e5d01078          LDRB     r1,[r0,#0x78]
000834  e28f0d05          ADR      r0,|L1.2428|
000838  ebfffffe          BL       uart_printf
;;;291    
;;;292        rINTMSK |= BIT_RTC;
00083c  e3a0044a          MOV      r0,#0x4a000000
000840  e5900008          LDR      r0,[r0,#8]
000844  e3800101          ORR      r0,r0,#0x40000000
000848  e3a0144a          MOV      r1,#0x4a000000
00084c  e5810008          STR      r0,[r1,#8]
;;;293        rRTCCON  = 0x0;					// No reset, Merge BCD counters, 1/32768, RTC Control disable    
000850  e3a00000          MOV      r0,#0
000854  e3a01457          MOV      r1,#0x57000000
000858  e5c10040          STRB     r0,[r1,#0x40]
;;;294        return f_nIsRtcInt;
00085c  e59f00f0          LDR      r0,|L1.2388|
000860  e5900000          LDR      r0,[r0,#0]  ; f_nIsRtcInt
000864  e8bd4010          POP      {r4,lr}
;;;295    }
000868  e12fff1e          BX       lr
;;;296    
                          ENDP

                  rtc_tick PROC
                  |L1.2156|
;;;436    *********************************************************************************************/
;;;437    void  __irq  rtc_tick(void)
00086c  e92d503f          PUSH     {r0-r5,r12,lr}
;;;438    {
;;;439    	ClearPending(BIT_TICK);   
000870  e3a00c01          MOV      r0,#0x100
000874  e3a0144a          MOV      r1,#0x4a000000
000878  e5810000          STR      r0,[r1,#0]
00087c  e3a0044a          MOV      r0,#0x4a000000
000880  e5900010          LDR      r0,[r0,#0x10]
000884  e5810010          STR      r0,[r1,#0x10]
;;;440    
;;;441    	uart_printf(" %03d seconds\r",f_unTickCount++);
000888  e59f0104          LDR      r0,|L1.2452|
00088c  e5904000          LDR      r4,[r0,#0]  ; f_unTickCount
000890  e2840001          ADD      r0,r4,#1
000894  e59f20f8          LDR      r2,|L1.2452|
000898  e5820000          STR      r0,[r2,#0]  ; f_unTickCount
00089c  e1a01004          MOV      r1,r4
0008a0  e28f00f0          ADR      r0,|L1.2456|
0008a4  ebfffffe          BL       uart_printf
;;;442    }
0008a8  e8bd503f          POP      {r0-r5,r12,lr}
0008ac  e25ef004          SUBS     pc,lr,#4
                          ENDP

                  rtc_tick_test PROC
;;;304    *********************************************************************************************/
;;;305    void rtc_tick_test(void)
0008b0  e92d4010          PUSH     {r4,lr}
;;;306    {
;;;307        uart_printf("\n RTC Tick interrupt(1 Second) test for S3C2410 \n");
0008b4  e28f00ec          ADR      r0,|L1.2472|
0008b8  ebfffffe          BL       uart_printf
;;;308        uart_printf(" Press any key to exit.\n"); 
0008bc  e28f0f46          ADR      r0,|L1.2524|
0008c0  ebfffffe          BL       uart_printf
;;;309            
;;;310        pISR_TICK = (unsigned)rtc_tick;
0008c4  e24f0060          ADR      r0,|L1.2156|
0008c8  e59f1128          LDR      r1,|L1.2552|
0008cc  e5810000          STR      r0,[r1,#0]
;;;311        f_unTickCount  = 1;
0008d0  e3a00001          MOV      r0,#1
0008d4  e59f10b8          LDR      r1,|L1.2452|
0008d8  e5810000          STR      r0,[r1,#0]  ; f_unTickCount
;;;312        rINTMSK  &= ~(BIT_TICK); 
0008dc  e3a0044a          MOV      r0,#0x4a000000
0008e0  e5900008          LDR      r0,[r0,#8]
0008e4  e3c00c01          BIC      r0,r0,#0x100
0008e8  e3a0144a          MOV      r1,#0x4a000000
0008ec  e5810008          STR      r0,[r1,#8]
;;;313        rRTCCON   = 0x0;            // No reset[3], Merge BCD counters[2], BCD clock select XTAL[1], RTC Control disable[0]
0008f0  e3a00000          MOV      r0,#0
0008f4  e3a01457          MOV      r1,#0x57000000
0008f8  e5c10040          STRB     r0,[r1,#0x40]
;;;314        rTICNT    = (1<<7) + 127;   // Tick time interrupt enable, Tick time count value 127
0008fc  e3a000ff          MOV      r0,#0xff
000900  e5c10044          STRB     r0,[r1,#0x44]
;;;315                                    // Period = (n + 1) / 128 second    n:Tick time count value(1~127)
;;;316        uart_getch();
000904  ebfffffe          BL       uart_getch
;;;317        uart_printf("\n");
000908  e28f0064          ADR      r0,|L1.2420|
00090c  ebfffffe          BL       uart_printf
;;;318        rINTMSK  |= BIT_TICK;
000910  e3a0044a          MOV      r0,#0x4a000000
000914  e5900008          LDR      r0,[r0,#8]
000918  e3800c01          ORR      r0,r0,#0x100
00091c  e3a0144a          MOV      r1,#0x4a000000
000920  e5810008          STR      r0,[r1,#8]
;;;319        rRTCCON   = 0x0;            // No reset[3], Merge BCD counters[2], BCD clock select XTAL[1], RTC Control disable[0]
000924  e3a00000          MOV      r0,#0
000928  e3a01457          MOV      r1,#0x57000000
00092c  e5c10040          STRB     r0,[r1,#0x40]
;;;320    }
000930  e8bd4010          POP      {r4,lr}
000934  e12fff1e          BX       lr
                  |L1.2360|
000938  20525443          DCB      " RTC Alarm Interrupt O.K.\n",0
00093c  20416c61
000940  726d2049
000944  6e746572
000948  72757074
00094c  204f2e4b
000950  2e0a00  
000953  00                DCB      0
                  |L1.2388|
                          DCD      f_nIsRtcInt
                  |L1.2392|
000958  20525443          DCB      " RTC Alarm Test for S3C2410 "
00095c  20416c61
000960  726d2054
000964  65737420
000968  666f7220
00096c  53334332
000970  34313020
                  |L1.2420|
000974  0a00              DCB      "\n",0
000976  00                DCB      0
000977  00                DCB      0
                  |L1.2424|
                          DCD      0x33ffff98
                  |L1.2428|
00097c  20253032          DCB      " %02x:%02x:%02x\n",0
000980  783a2530
000984  32783a25
000988  3032780a
00098c  00      
00098d  00                DCB      0
00098e  00                DCB      0
00098f  00                DCB      0
                  |L1.2448|
                          DCD      0x00005208
                  |L1.2452|
                          DCD      f_unTickCount
                  |L1.2456|
000998  20253033          DCB      " %03d seconds\r",0
00099c  64207365
0009a0  636f6e64
0009a4  730d00  
0009a7  00                DCB      0
                  |L1.2472|
0009a8  0a205254          DCB      "\n RTC Tick interrupt(1 Second) test for S3C2410 \n",0
0009ac  43205469
0009b0  636b2069
0009b4  6e746572
0009b8  72757074
0009bc  28312053
0009c0  65636f6e
0009c4  64292074
0009c8  65737420
0009cc  666f7220
0009d0  53334332
0009d4  34313020
0009d8  0a00    
0009da  00                DCB      0
0009db  00                DCB      0
                  |L1.2524|
0009dc  20507265          DCB      " Press any key to exit.\n",0
0009e0  73732061
0009e4  6e79206b
0009e8  65792074
0009ec  6f206578
0009f0  69742e0a
0009f4  00      
0009f5  00                DCB      0
0009f6  00                DCB      0
0009f7  00                DCB      0
                  |L1.2552|
                          DCD      0x33ffff40
                          ENDP

                  rtc_check PROC
;;;330    *********************************************************************************************/
;;;331    char rtc_check(void)
0009fc  e92d4070          PUSH     {r4-r6,lr}
;;;332    {
;;;333    	INT8T cRtcAlarm = 0;
000a00  e3a05000          MOV      r5,#0
;;;334    	INT8T cYn = 0x59;
000a04  e3a04059          MOV      r4,#0x59
;;;335       
;;;336    	// Check RTC
;;;337    	while((cYn == 0x0d)|(cYn == 0x59)|(cYn == 0x79)|(cRtcAlarm == 0))
000a08  ea000019          B        |L1.2676|
                  |L1.2572|
;;;338    	{ cYn = 'N';
000a0c  e3a0404e          MOV      r4,#0x4e
;;;339    		// Get data from keybroad
;;;340    /*
;;;341    		while(1)
;;;342    		{
;;;343    			uart_printf(" RTC Check(Y/N)? ");
;;;344    			cYn = uart_getch();
;;;345    			uart_printf("%c\n",cYn);
;;;346    			if(cYn == 'Y' || cYn == 'y' || cYn == 'N' || cYn == 'n')
;;;347    				break;
;;;348    			else 
;;;349    				uart_printf(" Please chose Y or N\n");
;;;350    		}*/
;;;351    		if((cYn == 0x0d)|(cYn == 0x59)|(cYn == 0x79))
000a10  e354000d          CMP      r4,#0xd
000a14  1a000001          BNE      |L1.2592|
000a18  e3a00001          MOV      r0,#1
000a1c  ea000000          B        |L1.2596|
                  |L1.2592|
000a20  e3a00000          MOV      r0,#0
                  |L1.2596|
000a24  e3540059          CMP      r4,#0x59
000a28  1a000001          BNE      |L1.2612|
000a2c  e3a01001          MOV      r1,#1
000a30  ea000000          B        |L1.2616|
                  |L1.2612|
000a34  e3a01000          MOV      r1,#0
                  |L1.2616|
000a38  e1800001          ORR      r0,r0,r1
000a3c  e3540079          CMP      r4,#0x79
000a40  1a000001          BNE      |L1.2636|
000a44  e3a01001          MOV      r1,#1
000a48  ea000000          B        |L1.2640|
                  |L1.2636|
000a4c  e3a01000          MOV      r1,#0
                  |L1.2640|
000a50  e1900001          ORRS     r0,r0,r1
000a54  0a000002          BEQ      |L1.2660|
;;;352    			cRtcAlarm = rtc_alarm_test();			// Test rtc alarm
000a58  ebfffffe          BL       rtc_alarm_test
000a5c  e20050ff          AND      r5,r0,#0xff
000a60  ea000000          B        |L1.2664|
                  |L1.2660|
;;;353    		else break;
000a64  ea00001a          B        |L1.2772|
                  |L1.2664|
;;;354    		if (cRtcAlarm) break;
000a68  e3550000          CMP      r5,#0
000a6c  0a000000          BEQ      |L1.2676|
000a70  ea000017          B        |L1.2772|
                  |L1.2676|
000a74  e354000d          CMP      r4,#0xd               ;337
000a78  1a000001          BNE      |L1.2692|
000a7c  e3a00001          MOV      r0,#1                 ;337
000a80  ea000000          B        |L1.2696|
                  |L1.2692|
000a84  e3a00000          MOV      r0,#0                 ;337
                  |L1.2696|
000a88  e3540059          CMP      r4,#0x59              ;337
000a8c  1a000001          BNE      |L1.2712|
000a90  e3a01001          MOV      r1,#1                 ;337
000a94  ea000000          B        |L1.2716|
                  |L1.2712|
000a98  e3a01000          MOV      r1,#0                 ;337
                  |L1.2716|
000a9c  e1800001          ORR      r0,r0,r1              ;337
000aa0  e3540079          CMP      r4,#0x79              ;337
000aa4  1a000001          BNE      |L1.2736|
000aa8  e3a01001          MOV      r1,#1                 ;337
000aac  ea000000          B        |L1.2740|
                  |L1.2736|
000ab0  e3a01000          MOV      r1,#0                 ;337
                  |L1.2740|
000ab4  e1800001          ORR      r0,r0,r1              ;337
000ab8  e3550000          CMP      r5,#0                 ;337
000abc  1a000001          BNE      |L1.2760|
000ac0  e3a01001          MOV      r1,#1                 ;337
000ac4  ea000000          B        |L1.2764|
                  |L1.2760|
000ac8  e3a01000          MOV      r1,#0                 ;337
                  |L1.2764|
000acc  e1900001          ORRS     r0,r0,r1              ;337
000ad0  1affffcd          BNE      |L1.2572|
                  |L1.2772|
000ad4  e1a00000          MOV      r0,r0                 ;353
;;;355    	}
;;;356    	return cRtcAlarm;   
000ad8  e1a00005          MOV      r0,r5
000adc  e8bd4070          POP      {r4-r6,lr}
;;;357    }
000ae0  e12fff1e          BX       lr
;;;358    
                          ENDP

                  rtc_test PROC
;;;366    *********************************************************************************************/
;;;367    char* rtc_test(void)
000ae4  e92d4010          PUSH     {r4,lr}
;;;368    {
;;;369    	INT32T	nKey;
;;;370    	
;;;371    	// User interface
;;;372    	//uart_printf("\n RTC Test Example\n"); 
;;;373    
;;;374    	// Check if rtc work normally
;;;375    	/*
;;;376    	if(!rtc_check())
;;;377    		uart_printf(" Please check RTC, maybe it's Wrong!. \n");
;;;378    	else
;;;379    	{
;;;380    		//uart_printf(" 0. RTC Time Setting    1. Only RTC Display\n");
;;;381    		/*
;;;382    	 	while(1)
;;;383    		{
;;;384    			uart_printf(" Please Selet : ");
;;;385    			nKey = uart_getintnum();
;;;386    			if(nKey > 0x1 || nKey < 0x0)
;;;387    				uart_printf(" The number you input are invalid! Please input again!\n");
;;;388    			else break;
;;;389    		}*/
;;;390    		/*
;;;391    		nKey = 0x01;
;;;392    	    if(!nKey)
;;;393    	    {
;;;394    			rtc_init(); 
;;;395    	    	rtc_set();						// Set a new g_nDate and time
;;;396    	    }
;;;397    	}*/
;;;398    	//rtc_init(); 
;;;399      //rtc_set();						// Set a new g_nDate and time
;;;400    	return rtc_display();
000ae8  ebfffffe          BL       rtc_display
000aec  e8bd4010          POP      {r4,lr}
;;;401    	/*
;;;402      while(1){
;;;403    	ptr= rtc_display();							// Display current time
;;;404    	uart_printf("\n %d %d %d %d %d %d -----------------\n", ptr[0], ptr[1], ptr[2], ptr[3], ptr[4], ptr[5]);
;;;405    	delay(20000);*/
;;;406    }
000af0  e12fff1e          BX       lr
;;;407    	
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  local_time
                          %        10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  0a20506c          DCB      0x0a,0x20,0x50,0x6c
000004  65617365          DCB      0x65,0x61,0x73,0x65
000008  20696e70          DCB      0x20,0x69,0x6e,0x70
00000c  75742030          DCB      0x75,0x74,0x20,0x30
000010  7820616e          DCB      0x78,0x20,0x61,0x6e
000014  64205477          DCB      0x64,0x20,0x54,0x77
000018  6f206469          DCB      0x6f,0x20,0x64,0x69
00001c  67697420          DCB      0x67,0x69,0x74,0x20
000020  7468656e          DCB      0x74,0x68,0x65,0x6e
000024  20707265          DCB      0x20,0x70,0x72,0x65
000028  73732045          DCB      0x73,0x73,0x20,0x45
00002c  6e746572          DCB      0x6e,0x74,0x65,0x72
000030  2c207375          DCB      0x2c,0x20,0x73,0x75
000034  63682061          DCB      0x63,0x68,0x20,0x61
000038  73203078          DCB      0x73,0x20,0x30,0x78
00003c  39392e0a          DCB      0x39,0x39,0x2e,0x0a
000040  00000000          DCB      0x00,0x00,0x00,0x00
000044  0a20313a          DCB      0x0a,0x20,0x31,0x3a
000048  53756e64          DCB      0x53,0x75,0x6e,0x64
00004c  61792032          DCB      0x61,0x79,0x20,0x32
000050  3a4d6f6e          DCB      0x3a,0x4d,0x6f,0x6e
000054  64617920          DCB      0x64,0x61,0x79,0x20
000058  333a5475          DCB      0x33,0x3a,0x54,0x75
00005c  65736461          DCB      0x65,0x73,0x64,0x61
000060  7920343a          DCB      0x79,0x20,0x34,0x3a
000064  5765646e          DCB      0x57,0x65,0x64,0x6e
000068  65736461          DCB      0x65,0x73,0x64,0x61
00006c  7920353a          DCB      0x79,0x20,0x35,0x3a
000070  54687572          DCB      0x54,0x68,0x75,0x72
000074  73646179          DCB      0x73,0x64,0x61,0x79
000078  20363a46          DCB      0x20,0x36,0x3a,0x46
00007c  72696461          DCB      0x72,0x69,0x64,0x61
000080  7920373a          DCB      0x79,0x20,0x37,0x3a
000084  53617475          DCB      0x53,0x61,0x74,0x75
000088  72646179          DCB      0x72,0x64,0x61,0x79
00008c  0a00              DCB      0x0a,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  2000              DCB      " ",0
000002  53554e00          DCB      "SUN",0
000006  4d4f4e00          DCB      "MON",0
00000a  54554500          DCB      "TUE",0
00000e  57454400          DCB      "WED",0
000012  54485200          DCB      "THR",0
000016  46524900          DCB      "FRI",0
00001a  53415400          DCB      "SAT",0

                          AREA ||.data||, DATA, ALIGN=2

                  ||day||
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x2
                          DCD      ||.conststring||+0x6
                          DCD      ||.conststring||+0xa
                          DCD      ||.conststring||+0xe
                          DCD      ||.conststring||+0x12
                          DCD      ||.conststring||+0x16
                          DCD      ||.conststring||+0x1a
                  g_nYear
                          DCD      0x00000000
                  g_nMonth
                          DCD      0x00000000
                  g_nDate
                          DCD      0x00000000
                  g_nWeekday
                          DCD      0x00000000
                  g_nHour
                          DCD      0x00000000
                  g_nMin
                          DCD      0x00000000
                  g_nSec
                          DCD      0x00000000
                  f_nIsRtcInt
                          DCD      0x00000000
                  f_unTickCount
                          DCD      0x00000000
